**************
*** Domain ***
**************

- Corp.System.Hexagonal.Shared.Domain: Projeto de escopo genérico
    - Compartilha informações comuns para os demais projetos, exemplos:
        - Classes abstratas (Abstracts)
        - Interfces (Interfaces)
        - Enumeradores (Enumerations)
    - Deve ser exposto a partir de compartilhamento de pacotes (ex. Nuget package)


*** Corp.System.Hexagonal.Orders.Domain ***
Implementa as interfaces de:
- entrada (incoming): casos de uso e;
- saída (outgoing): interações com interfaces externas ao domínio, ex.: APIs, repositórios, integrações como notificadores, filas, outros middlewares, etc;

*******************
*** Application ***
*******************
Implementa as interfaces (casos de uso) de entrada (incoming) diretamente relacionadas ao núcleo do domínio.

> Corp.System.Hexagonal.Orders.Application: 
- Faz referência direta ao projeto domínio (Corp.System.Hexagonal.Orders.Domain), como foco nas interfaces de entrada (incomming)

****************
*** Adapters ***
****************
- Implementa as interfaces das portas de saída (outgoing) ou
- Integra as implementações de entrada (incoming) via "Application" e suas saídas (outgoing) implementadas.
    - Atenção: vários Adapter de saída podem ser implementadas, de acordo com o objetivo de cada caso de uso, exemplos: Web App, WebAPI, Console, Worker Services, etc. E dentro de cada um desses projetos apenas as integrações que os viabilizam. Exemplos:
        - CasoUsoA + Repositorio + Notificação: Implementado via worker service ou;
        - CasoUsoB e CasoUsoC + Repositório + Nuvem: Implementado via WebAPI.

> Corp.System.Hexagonal.Orders.Adapters.Repository.EF: (outgoing) Acesso genérico ao modelo do repositório. No caso implementado pelo "Entity Framework"
> Corp.System.Hexagonal.Orders.Adapters.WebAPI: (incoming) e suas implementações

************************
*** Testes Unitários ***
************************
Viabiliza os testes unitários do projeto

> Corp.System.Hexagonal.Orders.UnitTests


************
*** TODO ***
************
- Domínio de Exceções
- Domínio:
    - Models: Atenção para as classes Input e Output representarem as propriedades REALMENTE necessárias
- REPOSITÓRIOS:
    - Vínculo com AutoMapper
    - AutoMapper: Tradução de enumeradores
    - OK: Entidades (Repositorio) x Enumeradores: Não devem traduzir enumeradores. Utilizar o tipo "puro" (byte, short, int);
    - Tradução de Entidade x Modelo (Classe ClientParty)
    - Avaliar a pattern de CRUD Repository
- Docker
    - Compilar sem Framework
    - Pacotes multi entrada ou múltiplos pacotes?
- Services
    - Descrever o "ServiceLocator" (em Order.Domain)
    - Avaliar Interface IServiceLocator<T>(object context)
    - Transformar classes "Resolver" em classes vinculadas a ServiceCollection (para o correto instanciamento das classes)
- Shared
    - Montar package Nuget


**************************
*** Gestão de Soluções ***
**************************

- Criar projetos
dotnet new classlib -o Corp.System.Hexagonal.Shared.Domain
dotnet new webapp -o Corp.System.Hexagonal.Orders.Adapters.WebAPI

- Adcionar projetos à solução (a partir da pasta do arquivo ".sln"):
dotnet sln add .\Corp.System.Hexagonal.Orders.Application
dotnet sln add .\Corp.System.Hexagonal.Orders.Adapters.Repository.EF
dotnet sln add .\Corp.System.Hexagonal.Orders.UnitTests
dotnet sln add .\Corp.System.Hexagonal.Orders.Adapters.WebAPI
dotnet sln add .\Corp.System.Hexagonal.Shared.Domain


- Gerir referências dos projetos (a partir da pasta do projeto/arquivo ".csproj"):
dotnet add reference ..\Corp.System.Hexagonal.Orders.Domain
dotnet add reference ..\Corp.System.Hexagonal.Orders.Application
dotnet add reference ..\Corp.System.Hexagonal.Shared.Domain


dotnet remove reference ..\Corp.System.Hexagonal.Orders.Domain

- Adicionar pacotes aos projetos (a partir da pasta do projeto/arquivo ".csproj"):
dotnet add package Microsoft.EntityFrameworkCore (Repository)
dotnet add package Microsoft.EntityFrameworkCore.InMemory
dotnet add package AutoMapper (Application; Repository: Model -> Entity; WebAPI: Dto -> Model)
dotnet add package FluentAssertions (UnitTests)
dotnet add package FluentValidation.AspNetCore (Application)
dotnet add package Microsoft.Extensions.DependencyInjection
    - referência: https://docs.fluentvalidation.net/en/latest/start.html
*** Para testes ***
dotnet add package Microsoft.EntityFrameworkCore.Sqlite
dotnet add package Moq